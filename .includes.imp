[
  { include: ["<boost/geometry/core/cs.hpp>",                            "private", "<boost/geometry.hpp>", "public" ] },
  { include: ["<boost/geometry/core/index/predicates.hpp>",              "private", "<boost/geometry.hpp>", "public" ] },
  { include: ["<boost/geometry/core/static_assert.hpp>",                 "private", "<boost/geometry.hpp>", "public" ] },
  { include: ["<boost/geometry/index/detail/exception.hpp>",             "private", "<boost/geometry.hpp>", "public" ] },
  { include: ["<boost/geometry/index/detail/rtree/query_iterators.hpp>", "private", "<boost/geometry.hpp>", "public" ] },
  { include: ["<boost/geometry/index/parameters.hpp>",                   "private", "<boost/geometry.hpp>", "public" ] },
  { include: ["<boost/geometry/index/predicates.hpp>",                   "private", "<boost/geometry.hpp>", "public" ] },
  { include: ["<boost/move/utility_core.hpp>",                           "private", "<boost/geometry.hpp>", "public" ] },
  { include: ["<boost/variant/detail/apply_visitor_unary.hpp>",          "private", "<boost/geometry.hpp>", "public" ] },

  { "symbol": [ "std::equal",                   "private", "<algorithm>", "public" ] },
  { "symbol": [ "std::lexicographical_compare", "private", "<algorithm>", "public" ] },
  { "symbol": [ "std::max",                     "private", "<algorithm>", "public" ] },
  { "symbol": [ "std::min",                     "private", "<algorithm>", "public" ] },
  { "symbol": [ "std::move",                    "private", "<utility>",   "public" ] },
  { "symbol": [ "std::ofstream",                "private", "<fstream>",   "public" ] },
  { "symbol": [ "std::tuple_element",           "private", "<tuple>",     "public" ] }
]
